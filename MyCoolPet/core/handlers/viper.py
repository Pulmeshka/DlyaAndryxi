from aiogram import types
from ..db import db, pets
from random import randint
from .confog import *

randomButton = types.InlineKeyboardMarkup(row_width=2)
randomButton1 = types.InlineKeyboardButton(text='—á—ë—Ç‚úÖ', callback_data='randomOne')
randomButton2 = types.InlineKeyboardButton(text='–Ω–µ —á—ë—Ç‚ùå', callback_data='randomTwo')
randomButton.add(randomButton1, randomButton2)

async def viper(message: types.Message):   
    user_id = message.from_user.id
    name = message.from_user.full_name
    user = message.from_user.username
    await db.insert_user(user_id, name, user)
    if await db.get_ban(user_id) == 1:
        await message.answer('—Ç—ã –≤ –±–∞–Ω–µüí•')
        return
    if await db.vip(user_id) == 1:
        try:
            suma = message.text.split()[1]
            try:
                suma = int(suma)
                coin = await db.get_coin(user_id)
                coin = int(coin)
                if coin < suma or suma < 1:
                    await message.answer('–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç‚ùå')
                    return
                coin -= suma
                await db.update_coin(user_id, coin)
                await message.reply('—á—ë—Ç –∏–ª–∏ –Ω–µ —á—ë—Ç', reply_markup=randomButton)
                
            except ValueError:
                await message.answer('—Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º‚ùå')
        except IndexError:
            await message.answer('–∞ —Å—Ç–∞–≤–∫–∞ –≥–¥–µ‚ùì')
    else:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç—É VIP‚ùå')


async def viper_random1(call: types.CallbackQuery):
    user_id = call.from_user.id
    touch_id = call.message.reply_to_message.from_user.id
    randomizer = randint(1, 6)
    wearpet = await pets.get_wearpet(user_id)
    plus_sum = 1
    if wearpet in x1:
        plus_sum = 2
    elif wearpet in x2:
        plus_sum = 3
    elif wearpet in x3:
        plus_sum = 4
    if user_id != touch_id:
        await call.answer('üôÜ –ù–µ —Ç–≤–æ—ë', show_alert=True)
        return
    else:
        if randomizer == 2 or randomizer == 4 or randomizer == 6:
            suma = call.message.text.split()[1]
            coin = await db.get_coin(user_id)
            await call.message.edit_text(f'–≤—ã –ø–æ–±–µ–¥–∏–ª–∏, —Å—Ç–∞–≤–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞üéâ\n—á–∏—Å–ª–æ: {randomizer}')
            suma = int(suma)
            coin = int(coin)
            suma *= plus_sum
            coin += suma
            await db.update_coin(user_id, coin)
        else:
            await call.message.edit_text(f'–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏, —Å—Ç–∞–≤–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞üôÑ\n—á–∏—Å–ª–æ: {randomizer}')

async def viper_random2(call: types.CallbackQuery):
    user_id = call.from_user.id
    touch_id = call.message.reply_to_message.from_user.id
    randomizer = randint(1, 6)
    wearpet = await pets.get_wearpet(user_id)
    plus_sum = 1
    if wearpet in x1:
        plus_sum = 2
    elif wearpet in x2:
        plus_sum = 3
    elif wearpet in x3:
        plus_sum = 4
    if user_id != touch_id:
        await call.answer('üôÜ –ù–µ —Ç–≤–æ—ë', show_alert=True)
        return
    else:
        if randomizer == 1 or randomizer == 3 or randomizer == 5:
            suma = call.message.text.split()[1]
            coin = await db.get_coin(user_id)
            await call.message.edit_text(f'–≤—ã –ø–æ–±–µ–¥–∏–ª–∏, —Å—Ç–∞–≤–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞üéâ\n—á–∏—Å–ª–æ: {randomizer}')
            suma = int(suma)
            coin = int(coin)
            suma *= plus_sum
            coin += suma
            await db.update_coin(user_id, coin)
        else:
            await call.message.edit_text(f'–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏, —Å—Ç–∞–≤–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞üôÑ\n—á–∏—Å–ª–æ: {randomizer}')