from aiogram import types
from ..db import db, pets
from random import randint
from .confog import *

grassButton = types.InlineKeyboardMarkup(row_width=2)
grassButton1 = types.InlineKeyboardButton(text='üåø', callback_data='grassOne')
grassButton2 = types.InlineKeyboardButton(text='üåø', callback_data='grassTwo')
grassButton.add(grassButton1, grassButton2)

async def grass_game(message: types.Message):   
    user_id = message.from_user.id
    name = message.from_user.full_name
    user = message.from_user.username
    await db.insert_user(user_id, name, user)
    if await db.get_ban(user_id) == 1:
        await message.answer('—Ç—ã –≤ –±–∞–Ω–µüí•')
        return
    try:
        suma = message.text.split()[1]
        try:
            suma = int(suma)
            coin = await db.get_coin(user_id)
            coin = int(coin)
            if coin < suma or suma < 1:
                await message.answer('–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç‚ùå')
                return
            coin -= suma
            await db.update_coin(user_id, coin)
            await message.reply(f'—Å—Ç–∞–≤–∫–∞: {suma}\n–≤—ã–±–µ—Ä–∏ —Ç—Ä–∞–≤–∫—É\n–ø–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ - /helpgrass', reply_markup=grassButton)
        except ValueError:
            await message.answer('—Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º‚ùå')
    except IndexError:
        await message.answer('–∞ —Å—Ç–∞–≤–∫–∞ –≥–¥–µ‚ùì')

async def Grass_random(call: types.CallbackQuery):
    user_id = call.from_user.id
    touch_id = call.message.reply_to_message.from_user.id
    radnom_grass = randint(1, 2)
    wearpet = await pets.get_wearpet(user_id)
    plus_sum = 1
    if wearpet in x1:
        plus_sum = 2
    elif wearpet in x2:
        plus_sum = 3
    elif wearpet in x3:
        plus_sum = 4
    if user_id != touch_id:
        await call.answer('üôÜ –ù–µ —Ç–≤–æ—ë', show_alert=True)
        return
    else:
        if radnom_grass == 1:
            suma = call.message.text.split()[1]
            coin = await db.get_coin(user_id)
            await call.message.edit_text('–≤—ã –ø–æ–±–µ–¥–∏–ª–∏, —Å—Ç–∞–≤–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞üéâ')
            suma = int(suma)
            coin = int(coin)
            suma *= plus_sum
            coin += suma
            await db.update_coin(user_id, coin)
        else:
            await call.message.edit_text('–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏, —Å—Ç–∞–≤–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞üôÑ')

async def Grass_random2(call: types.CallbackQuery):
    user_id = call.from_user.id
    touch_id = call.message.reply_to_message.from_user.id
    radnom_grass = randint(1, 2)
    wearpet = await pets.get_wearpet(user_id)
    plus_sum = 1
    if wearpet in x1:
        plus_sum = 2
    elif wearpet in x2:
        plus_sum = 3
    elif wearpet in x3:
        plus_sum = 4
    if user_id != touch_id:
        await call.answer('üôÜ –ù–µ —Ç–≤–æ—ë', show_alert=True)
        return
    else:
        if radnom_grass == 2:
            suma = call.message.text.split()[1]
            coin = await db.get_coin(user_id)
            await call.message.edit_text('–≤—ã –ø–æ–±–µ–¥–∏–ª–∏, —Å—Ç–∞–≤–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞üéâ')
            suma = int(suma)
            coin = int(coin)
            suma *= plus_sum
            coin += suma
            await db.update_coin(user_id, coin)
        else:
            await call.message.edit_text('–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏, —Å—Ç–∞–≤–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞üôÑ')


async def grass_help(message: types.Message):   
    user_id = message.from_user.id
    name = message.from_user.full_name
    user = message.from_user.username
    await db.insert_user(user_id, name, user)
    if await db.get_ban(user_id) == 1:
        await message.answer('—Ç—ã –≤ –±–∞–Ω–µüí•')
        return
    await message.answer(
        '–ø–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ "—Ç—Ä–∞–≤–∫–∞"üòç\n'
        '–≤ –Ω–∞—á–∞–ª–µ –≤—ã–¥–æ–ª–∂–Ω—ã –ø—Ä–æ–ø–∏—Å–∞—Ç—å "—Ç—Ä–∞–≤–∫–∞ <—Å—Ç–∞–≤–∫–∞>"\n'
        '–ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã —É–≤–∏–¥–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏\n'
        '–≤ –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫ –ª–µ–∂–∞—Ç –º–æ–Ω–µ—Ç–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏, —Ç–∞–∫ –µ—â—ë –∏ –ø–æ–¥–∞—Ä–æ—á–µ–∫ –≤ –≤–∏–¥–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —ç—Ç–∏—Ö –º–æ–Ω–µ—Ç\n'
        '–µ—Å–ª–∏ –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç—Ä–∞–≤–∫—É, –≤—ã –∑–∞–±–µ—Ä–µ—Ç–µ —ç—Ç–∏ –º–æ–Ω–µ—Ç—ã\n'
        '–µ—Å–ª–∏ –Ω–µ—Ç - —É–≤—ã, –ª–∏—Å —Å–≤–æ—Ä–æ–≤–∞–ª –≤–∞—à–∏ –º–æ–Ω–µ—Ç—ã')