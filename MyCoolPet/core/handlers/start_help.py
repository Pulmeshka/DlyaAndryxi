from aiogram import types, Bot
from ..db import db, pets
from .confog import dp, wear_pet

bot = Bot(token="6641352325:AAFd_--9U80bHfCIjZmKI0hWlLnrcG9US4A")

async def start(message: types.Message):   
    user_id = message.from_user.id
    name = message.from_user.full_name
    user = message.from_user.username
    await db.insert_user(user_id, name, user)
    if await db.get_ban(user_id) == 1:
        await message.answer('—Ç—ã –≤ –±–∞–Ω–µüí•')
        return
    keyboardhelp = types.InlineKeyboardMarkup()
    keyboardhelp.add(types.InlineKeyboardButton(text='–ø–æ–ª–Ω—ã–π –≥–∞–π–¥‚ÅâÔ∏è', url='https://telegra.ph/Gajd-MyCoolPet-bot-10-09'))
    await message.answer('<a href="https://t.me/MyCoolPetNews"><b>–ö–ê–ù–ê–õ –ë–û–¢–ê</b></a>\n<a href="https://t.me/MyCoolPetCHAT"><b>–ß–ê–¢ –ë–û–¢–ê</b></a>', parse_mode='HTML', reply_markup=keyboardhelp)
    

async def me(message: types.Message):  
    user_id = message.from_user.id
    name = message.from_user.full_name
    user = message.from_user.username
    await db.insert_user(user_id, name, user) 
    wearpet = await pets.get_wearpet(user_id)
    diamond = await db.get_diamond(user_id)
    if await db.get_ban(user_id) == 1:
        await message.answer('—Ç—ã –≤ –±–∞–Ω–µüí•')
        return
    coin = await db.get_coin(user_id)
    if await db.vip(user_id) == 1:
        viptext = 'üëëVIPüëë'
    else:
        viptext = ''
    await message.answer_sticker(f'{wear_pet[wearpet]}')
    keyboardmoney = types.InlineKeyboardMarkup()
    keyboardmoney.add(types.InlineKeyboardButton(text=f'–∏–º—è: {name}', callback_data='error'))
    keyboardmoney.add(types.InlineKeyboardButton(text=f'–º–æ–Ω–µ—Ç—ã‚öú: {coin}', callback_data='error'))
    keyboardmoney.add(types.InlineKeyboardButton(text=f'–∫—Ä–∏—Å—Ç–∞–ª–ª—ãüíé: {diamond}', callback_data='error'))
    keyboardmoney.add(types.InlineKeyboardButton(text='–¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç‚ûï', url='https://t.me/MyCoolPet_bot?startgroup='))
    await message.reply(
        f'{viptext}\n'
        f'‚áí <code><b>{user_id}</b></code>'
        , parse_mode='HTML', reply_markup=keyboardmoney)


@dp.callback_query_handler(text="error")
async def error(call: types.CallbackQuery):
    await call.answer('–∫–Ω–æ–ø–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Çüíõ')

async def all_users(message: types.Message):   
    user_id = message.from_user.id
    name = message.from_user.full_name
    user = message.from_user.username
    await db.insert_user(user_id, name, user) 
    all_us = await db.get_all()
    await message.answer(f'–≤ <b>MyCoolPet</b> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ <b>{all_us}</b> –∏–≥—Ä–æ–∫–æ–≤üïπ', parse_mode='HTML')

# async def channel_bonus(message: types.Message):   
#     user_id = message.from_user.id
#     name = message.from_user.full_name
#     user = message.from_user.username
#     await db.insert_user(user_id, name, user)
#     result = await bot.get_chat_member(chat_id='-1001881267377', user_id=user_id)
#     bonus = await db.bonus_chat(user_id)
#     if result.status == 'left':
#         await message.answer('‚ùå–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª‚ùå\n@MyCoolPetNews')
#         return
#     if result.status != 'member' or result.status != 'left':
#         await message.answer('ERROR‚ùå')
#         return
#     if result.status == 'member':
#         if bonus == 1:
#             await message.answer('—Ç—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –Ω–∞–≥—Ä–∞–¥—É‚ùå')
#             return
#         await message.answer('—Ç—ã –ø–æ–ª—É—á–∏–ª 10 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É‚úÖ')
#         diamond = await db.get_diamond(user_id)
#         diamond = int(diamond)
#         diamond += 10
#         bonus = 1
#         await db.newbonus(user_id, bonus)
#         await db.update_diamond(user_id, diamond)

async def donate(message: types.Message):  
    user_id = message.from_user.id
    name = message.from_user.full_name
    user = message.from_user.username
    await db.insert_user(user_id, name, user) 
    if await db.get_ban(user_id) == 1:
        await message.answer('—Ç—ã –≤ –±–∞–Ω–µüí•\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–±–∞–Ω–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ 300üíé, –ø–∏—Å–∞—Ç—å –∫: @Pulmeshka_of')
        return
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç –¥–æ—Ä–æ–≥–æ–π –ª—é–±–∏—Ç–µ–ª—å –ø–∏—Ç–æ–º—Ü–µ–≤, –≤–∏–∂—É —Ç—ã —Ä–µ—à–∏–ª –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –¥–æ–Ω–∞—Ç –º–µ–Ω—é\n'
        '–ö—Ä–∏—Å—Ç–∞–ª–ª—ã —Å—Ç–æ—è—Ç –ø–æ –∫—É—Ä—Å—É <b>1 –≥—Ä–Ω = 5 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤</b>\n'
        '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –æ—Ç 20 –≥—Ä–Ω\n'
        '–ü–æ –ø–æ–≤–æ–¥—É –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω—è—Ç—å\n'
        '–ï—Å–ª–∏ –∂–µ–ª–∞–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã - –ø–∏—à–∏ –∫ <b>@Pulmeshka_of</b>'
        , parse_mode='HTML')
    
async def bot_command(message: types.Message):  
    user_id = message.from_user.id
    name = message.from_user.full_name
    user = message.from_user.username
    await db.insert_user(user_id, name, user) 
    await message.reply('–ú—É—Ä—Ä, –Ω–∞ –º–µ—Å—Ç–µ')

async def promo_command(message: types.Message):  
    user_id = message.from_user.id
    name = message.from_user.full_name
    user = message.from_user.username
    await db.insert_user(user_id, name, user) 
    if await db.get_ban(user_id) == 1:
        await message.answer('—Ç—ã –≤ –±–∞–Ω–µüí•')
        return
    diamond = await db.get_diamond(user_id)
    coin = await db.get_coin(user_id)
    diamond = int(diamond)
    coin = int(coin)
    try:
        promokod = message.text.split()[1]
        if await db.promo(user_id) == 1:
            await message.answer('–¢—ã —É–∂–µ –≤–≤–æ–¥–∏–ª –ø—Ä–æ–º–æ‚ùå')
            return
        if promokod == 'OpenBot':
            diamond += 500
            coin += 2000
            promok = 1
            await db.up_promo(user_id, promok)
            await db.update_coin(user_id, coin)
            await db.update_diamond(user_id, diamond)
            await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞–π–¥–µ–Ω‚úÖ\n<b>–ë—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ:</b>\n<b>500üíé\n2000ü™ô</b>', parse_mode='HTML')
        else:
            await message.answer('–î–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—ÇüôÖüèª')
    except IndexError:
        await message.answer('–¢—ã –Ω–µ –≤–≤—ë–ª –ø—Ä–æ–º–æ‚ùå')
